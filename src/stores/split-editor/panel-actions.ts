// stores/split-editor/panel-actions.ts
import type { StateCreator } from "zustand"
import type { SplitEditorStore } from "../../types/editor/types"

export const createPanelActions: StateCreator<
  SplitEditorStore,
  [],
  [],
  Pick<
    SplitEditorStore,
    "createPanel" | "removePanel" | "focusPanel" | "duplicatePanel" | "getFocusedPanel"
  >
> = (set, get) => ({
  /**
   * ÏÉàÎ°úÏö¥ Î∂ÑÌï† Ìå®ÎÑêÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§
   * @param panelId - ÏÉùÏÑ±Ìï† Ìå®ÎÑêÏùò Í≥†Ïú† ID
   * @param position - Ìå®ÎÑê ÏúÑÏπò (Í∏∞Î≥∏Í∞í: 'right')
   */
  createPanel: (panelId, position = "right") => {
    try {
      console.log("‚ûï [SplitEditor] Ìå®ÎÑê ÏÉùÏÑ±:", panelId, position)

      const { panels } = get()

      if (panels[panelId]) {
        console.warn("‚ö†Ô∏è [SplitEditor] Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ìå®ÎÑê:", panelId)
        return
      }

      set(state => ({
        layout: {
          ...state.layout,
          panelPositions: {
            ...state.layout.panelPositions,
            [panelId]: position,
          },
        },
        panels: {
          ...state.panels,
          [panelId]: {
            activeFileId: null,
            createdAt: new Date(),
            isFocused: false,
            openTabs: [],
            panelId,
          },
        },
      }))
    } catch (error) {
      console.error("‚ùå [SplitEditor] Ìå®ÎÑê ÏÉùÏÑ± Ïã§Ìå®:", error)
    }
  },

  /**
   * Ìå®ÎÑêÏùÑ Î≥µÏ†úÌï©ÎãàÎã§
   * @param sourcePanelId - ÏõêÎ≥∏ Ìå®ÎÑê ID
   * @param targetPanelId - Î≥µÏ†úÎê† Ìå®ÎÑê ID
   */
  duplicatePanel: (sourcePanelId, targetPanelId) => {
    try {
      console.log("ÔøΩ [SplitEditor] Ìå®ÎÑê Î≥µÏ†ú:", sourcePanelId, "->", targetPanelId)

      const { panels, createPanel } = get()
      const sourcePanel = panels[sourcePanelId]

      if (!sourcePanel) {
        console.warn("‚ö†Ô∏è [SplitEditor] ÏõêÎ≥∏ Ìå®ÎÑêÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå:", sourcePanelId)
        return
      }

      createPanel(targetPanelId)

      set(state => ({
        panels: {
          ...state.panels,
          [targetPanelId]: {
            ...state.panels[targetPanelId],
            activeFileId: sourcePanel.activeFileId,
            openTabs: [...sourcePanel.openTabs],
          },
        },
      }))
    } catch (error) {
      console.error("‚ùå [SplitEditor] Ìå®ÎÑê Î≥µÏ†ú Ïã§Ìå®:", error)
    }
  },

  /**
   * ÌäπÏ†ï Ìå®ÎÑêÏóê Ìè¨Ïª§Ïä§Î•º ÏÑ§Ï†ïÌï©ÎãàÎã§
   * @param panelId - Ìè¨Ïª§Ïä§Ìï† Ìå®ÎÑê ID
   */
  focusPanel: panelId => {
    try {
      console.log("üëÜ [SplitEditor] Ìå®ÎÑê Ìè¨Ïª§Ïä§:", panelId)

      const { panels } = get()

      if (!panels[panelId]) {
        console.warn("‚ö†Ô∏è [SplitEditor] Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Ìå®ÎÑê:", panelId)
        return
      }

      set(state => ({
        focusedPanelId: panelId,
        panels: Object.fromEntries(
          Object.entries(state.panels).map(([id, panel]) => [
            id,
            {
              ...panel,
              isFocused: id === panelId,
              lastFocusedAt: id === panelId ? new Date() : panel.lastFocusedAt,
            },
          ])
        ),
      }))
    } catch (error) {
      console.error("‚ùå [SplitEditor] Ìå®ÎÑê Ìè¨Ïª§Ïä§ Ïã§Ìå®:", error)
    }
  },

  /**
   * ÌòÑÏû¨ Ìè¨Ïª§Ïä§Îêú Ìå®ÎÑêÏùÑ Î∞òÌôòÌï©ÎãàÎã§
   * @returns Ìè¨Ïª§Ïä§Îêú Ìå®ÎÑê ÎòêÎäî null
   */
  getFocusedPanel: () => {
    const { focusedPanelId, panels } = get()
    return focusedPanelId ? panels[focusedPanelId] || null : null
  },

  /**
   * Ìå®ÎÑêÏùÑ Ï†úÍ±∞Ìï©ÎãàÎã§ (Î©îÏù∏ Ìå®ÎÑê Ï†úÏô∏)
   * @param panelId - Ï†úÍ±∞Ìï† Ìå®ÎÑê ID
   */
  removePanel: panelId => {
    try {
      console.log("ÔøΩÔ∏è [SplitEditor] Ìå®ÎÑê Ï†úÍ±∞:", panelId)

      const { panels, focusedPanelId } = get()

      if (panelId === "main") {
        console.warn("‚ö†Ô∏è [SplitEditor] Î©îÏù∏ Ìå®ÎÑêÏùÄ Ï†úÍ±∞Ìï† Ïàò ÏóÜÏùå")
        return
      }

      const { [panelId]: _removed, ...remainingPanels } = panels
      const remainingPanelIds = Object.keys(remainingPanels)

      set(state => ({
        focusedPanelId:
          focusedPanelId === panelId ? remainingPanelIds[0] || "main" : focusedPanelId,
        layout: {
          ...state.layout,
          panelPositions: Object.fromEntries(
            Object.entries(state.layout.panelPositions).filter(([id]) => id !== panelId)
          ),
        },
        panels: remainingPanels,
      }))
    } catch (error) {
      console.error("‚ùå [SplitEditor] Ìå®ÎÑê Ï†úÍ±∞ Ïã§Ìå®:", error)
    }
  },
})
